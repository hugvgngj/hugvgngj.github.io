<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>learning/pytorch/60_minute_blitz</title>
    <url>/2019/12/06/learning/pytorch/60_minute_blitz/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>图像实验</title>
    <url>/2019/12/06/curicculum/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<ul>
<li><p>2.5D: 3D只有表面数据，比如加入了深度数据就是2.5D而不是3D（没有透视到不同深度的所有图像）</p>
</li>
<li><p>图像 - 像素<br>图形 - 矢量</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1bit</td>
<td>单色图像</td>
<td>黑白图</td>
</tr>
<tr>
<td>8bits</td>
<td>灰度图像</td>
<td>灰度图</td>
</tr>
<tr>
<td>8bits</td>
<td>伪彩图像</td>
<td>调色板</td>
</tr>
<tr>
<td>24bits</td>
<td>真彩图像</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>压缩效果：等差亮度 &gt; 等差明度<br>=&gt;LAB颜色空间，直接用8bit量化效果远好于RGB</li>
<li>色彩的三要素：色调（色场），亮度（振幅），饱和度（纯净程度）</li>
<li>去除阴影：阴影和道路颜色一样，只是亮度不一样，所以只要用有亮度和色调区分的颜色空间来筛选即可</li>
<li>人脸识别：黄种人的Cr值都在140-160之间</li>
<li>近红外NIR：对植物十分敏感</li>
<li>热红外：对温度十分敏感</li>
<li>DEM数字高程模型<br>规则格网点  数据内插  虚拟表示<br>DTM<br>DSM  (surface)</li>
<li>激光雷达（点云）<br>TOF (Time of Flight)</li>
<li>3D data<br>深度数据  点云 Mesh</li>
<li>暗原色去雾方法<br>暗通道先验：户外无雾图像中，在大部分非天空区域，至少有一个通道值很小或趋于0<br>雾噪声：每个地方都不趋于0</li>
<li>尼康：边缘清楚，黑白分明<br>佳能：色彩表现力强，过渡自然</li>
<li>焦距越短，视场角越大；焦距越长，视场越窄<br>现场估算：镜头焦距，视场大小及镜头到被摄物体距离的关系: $\frac{f}{D} = \frac{v}{V} = \frac{h}{H}$<br>f: 焦距        D: 距离<br>v: 图像宽度    V: 被摄物体宽度<br>h: 图像高度    H: 被摄物体高度</li>
<li>减少色差（色散现象）—–萤石镜片</li>
<li>畸变（distortion）鱼眼镜头<br>张正友方法</li>
</ul>
]]></content>
      <categories>
        <category>curriculum</category>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>课内</tag>
        <tag>大三上</tag>
        <tag>C方向</tag>
      </tags>
  </entry>
  <entry>
    <title>电子商务</title>
    <url>/2019/12/06/curicculum/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/</url>
    <content><![CDATA[<ul>
<li>避免乱码：在每一个php前面都加一个<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"Cache-Control: np-cache, post-check=0, pre-check=0"</span>);</span><br><span class="line">header(<span class="string">"Content-type: text/html;charset=gb2312"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>html加这个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h3 id="第1章-PHP概述"><a href="#第1章-PHP概述" class="headerlink" title="第1章 PHP概述"></a>第1章 PHP概述</h3><h4 id="1-1-动态网站技术"><a href="#1-1-动态网站技术" class="headerlink" title="1.1 动态网站技术"></a>1.1 动态网站技术</h4><ul>
<li>动态网页开发技术：数据保存在服务器（.NET PHP Java）</li>
<li>web服务器：接受请求<br>数据库服务器：存储数据<h4 id="1-2-前端技术"><a href="#1-2-前端技术" class="headerlink" title="1.2 前端技术"></a>1.2 前端技术</h4></li>
<li>HTML：控制内容显示方式</li>
<li>CSS：控制修饰内容</li>
<li>Javascript：脚本语言，嵌入HTML文件中<h4 id="1-3-PHP"><a href="#1-3-PHP" class="headerlink" title="1.3 PHP"></a>1.3 PHP</h4></li>
<li>嵌入HTML的脚本语言，运行于服务器端<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"服务器当前时间："</span>;</span><br><span class="line">	<span class="keyword">echo</span> date(<span class="string">'Y-m-d H-i-s'</span>.time());</span><br><span class="line">?/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-PHP开发环境"><a href="#1-4-PHP开发环境" class="headerlink" title="1.4 PHP开发环境"></a>1.4 PHP开发环境</h4></li>
<li>Apache：服务器程序</li>
<li>PHP：编程语言</li>
<li>MySQL：数据库程序</li>
<li>XAMPP：集成开发环境</li>
</ul>
<h3 id="第二章-PHP"><a href="#第二章-PHP" class="headerlink" title="第二章 PHP"></a>第二章 PHP</h3><h3 id="第三章-HTML"><a href="#第三章-HTML" class="headerlink" title="第三章 HTML"></a>第三章 HTML</h3><ul>
<li><p>META 刷新网页</p>
</li>
<li><p>HTML文件主体</p>
<ul>
<li>body</li>
</ul>
</li>
<li><p>颜色的表示方法</p>
<ul>
<li>命名方式定义，RED blue 等</li>
<li>RGB值 #FF0000: red  #0000FF: blue</li>
</ul>
</li>
<li><p>字形标记</p>
<ul>
<li>红色的中华人民共和国：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Font</span> <span class="attr">size</span>=<span class="string">10</span> <span class="attr">color</span>=<span class="string">Red</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">B</span>&gt;</span><span class="tag">&lt;<span class="name">I</span>&gt;</span> 中华人民共和国 <span class="tag">&lt;/<span class="name">I</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span><span class="tag">&lt;/<span class="name">Font</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表</p>
<ul>
<li>无序：UL  有序：OL</li>
<li>都是用LI表示表项</li>
</ul>
</li>
<li><p>图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">"图片文件名"</span> <span class="attr">alt</span>=<span class="string">"简单说明"</span> <span class="attr">width</span>=<span class="string">"图片的宽度"</span> <span class="attr">height</span>=<span class="string">"高度"</span> <span class="attr">hspace</span>=<span class="string">"水平方向的空白"</span> <span class="attr">vspace</span>=<span class="string">"垂直方向的空白"</span> <span class="attr">border</span>=<span class="string">"边框宽度"</span> <span class="attr">align</span>=<span class="string">"对齐方式"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文件名是相对路径 </li>
</ul>
</li>
<li><p>超链接标记</p>
<ul>
<li>可以把图片作为链接源<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">herf</span>=<span class="string">url</span>&gt;</span><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">arc</span>=<span class="string">图像文件名</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>表格标记</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TABLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CAPTION</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">valign</span>=<span class="string">top</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">CAPTION</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TR</span>&gt;</span><span class="tag">&lt;<span class="name">TH</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">TH</span>&gt;</span><span class="tag">&lt;<span class="name">TH</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">TH</span>&gt;</span><span class="tag">&lt;/<span class="name">TR</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TR</span>&gt;</span><span class="tag">&lt;<span class="name">TD</span>&gt;</span>表项11<span class="tag">&lt;/<span class="name">TD</span>&gt;</span><span class="tag">&lt;<span class="name">TD</span>&gt;</span>表项12<span class="tag">&lt;/<span class="name">TD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TABLE</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>记住<TABLE><TR><TH><TD>的区别</TD></TH></TR></TABLE></li>
</ul>
</li>
<li><p><strong>表单标记</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FORM</span> <span class="attr">action</span>=<span class="string">"url"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"value"</span> <span class="attr">onsubmit</span>=<span class="string">"function"</span> <span class="attr">onreset</span>=<span class="string">"function"</span> <span class="attr">target</span>=<span class="string">"window"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方法一般用post，get是当网页有参数时使用（比如邮箱链接里的账号密码）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">name</span>=<span class="string">"value"</span> <span class="attr">type</span>=<span class="string">"form area type"</span> <span class="attr">value</span>=<span class="string">"value"</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">checled</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>只有type=”submit”会自动提交，如果想用button提交就得用jacvascript脚本</p>
</li>
<li><p>type=”radio”:  name相同的radio属于一个group，一个group只能选择一个</p>
</li>
</ul>
</li>
<li><p>常见type控件：</p>
<table>
<thead>
<tr>
<th>type</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>文本</td>
</tr>
<tr>
<td>password</td>
<td>圈圈文本</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏属性</td>
</tr>
<tr>
<td>radio</td>
<td>单选钮</td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>SELECT</td>
<td>列表框</td>
</tr>
</tbody></table>
<ul>
<li>php文件传回使用字符串方式传回网页代码</li>
<li>hidden控件是用来传值给服务器用的，在服务器可以做保护（加if），防止直接修改网址妄图得到下一个页面</li>
<li>通过<code>if ($_POST[&quot;hidden控件的文件名&quot;]==&quot;1&quot;)</code>保护信息只能通过别的页面链接进来，防止直接修改网址妄图得到下一个页面</li>
</ul>
</li>
<li><p>一些on指令</p>
<ul>
<li><strong>onsubmit</strong>控件可以在提交前最后执行其中的步骤（作校验用），返回false就不submit了</li>
<li><strong>onkeyup</strong>：当键盘弹起</li>
<li><strong>onblur</strong>：鼠标移开</li>
</ul>
</li>
<li><p>span控件，控制浏览器显示内容，可以嵌入innerHTML</p>
</li>
<li><p><strong>建立框架</strong></p>
<ul>
<li>左右各一半</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FRAMESET</span> <span class="attr">cols</span>=<span class="string">"50%,*"</span>&gt;</span>     </span><br><span class="line">	<span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">name</span>=<span class="string">"left"</span> <span class="attr">src</span>=<span class="string">"left.html"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">name</span>=<span class="string">"left"</span> <span class="attr">src</span>=<span class="string">"left.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FRAMSET</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>回到某个网页<ul>
<li>没有框架<br><code>header(&quot;location: userlogin.htm&quot;);</code></li>
<li>有框架<br><code>die(&#39;&lt;script language=&quot;javascript&quot;&gt;top.location.href=&quot;loginexit.php&quot;&lt;/script&gt;&#39;);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><ul>
<li><p>varchar: 节省空间，方便修改</p>
</li>
<li><p>AUTO_INCREMENT: 顺序自动增量</p>
</li>
<li><p>增删改查</p>
<ul>
<li><p>增<br><code>insert into php_admin(userid, username, password, usertype) values(&#39;23456&#39;, &#39;高开元&#39;, &#39;sql&#39;, &#39;0&#39;);</code></p>
</li>
<li><p>删<br><code>delete  from  where</code></p>
</li>
<li><p>改<br><code>update php_admin set userage=20 where username=&quot;高兴&quot;</code></p>
</li>
<li><p>查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from php_admin</span><br><span class="line"></span><br><span class="line">select username,userid from php_admin where username=&apos;田丰&apos;</span><br><span class="line"></span><br><span class="line">select userid, username </span><br><span class="line">from php_admin </span><br><span class="line">where username like &quot;高%&quot;</span><br><span class="line"></span><br><span class="line">select username, </span><br><span class="line">avg(userage) as avgage</span><br><span class="line">from php_admin</span><br><span class="line">group by username	# 相同名字的合并成一条</span><br><span class="line"></span><br><span class="line">select username,</span><br><span class="line">avg(userage) as avgage</span><br><span class="line">from php_admin</span><br><span class="line">group by username</span><br><span class="line">having avg(userage) &gt;20    # having就是与where求交</span><br><span class="line">order by usertype</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% n个表要有n-1个约束（才能选出特定的条目）</span><br><span class="line">select stu.stuID, name, classnum,</span><br><span class="line">from student, stu_course, class</span><br><span class="line">where stu.stuID=stu_course.stuID</span><br><span class="line">and course.courseID = stu_course.courseID</span><br><span class="line">and score&gt;60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update stu_course</span><br><span class="line">SET</span><br><span class="line">where stuID in (select stuID from stu where name=&quot;李明&quot;)</span><br><span class="line"># 此处数据集合不能用=，只能用in</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h3 id="mysql-with-php"><a href="#mysql-with-php" class="headerlink" title="mysql with php"></a>mysql with php</h3><ul>
<li><p>以下三句一般一起先放出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"sql"</span>);	<span class="comment">//连接到数据库</span></span><br><span class="line">mysql_select_db(<span class="string">"qingzhou"</span>, $con);	<span class="comment">//选取数据库</span></span><br><span class="line">mysql_query(<span class="string">"set names gb2312"</span>);	<span class="comment">//mysql查询要支持GB2312</span></span><br></pre></td></tr></table></figure>
</li>
<li><pre><code>$sql = &quot;&quot;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  双引号中是sql语句，查询插入blablabla</span><br><span class="line"></span><br><span class="line">button控件，可以对表单进行提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### html php javascript交叉使用</span><br><span class="line"></span><br><span class="line">- html + php</span><br><span class="line">  .php的文件，在html框架中</span><br><span class="line">  </span><br><span class="line">  ```php</span><br><span class="line">  &lt;?php</span><br><span class="line">  if (true)?&gt;</span><br><span class="line">  Hello</span><br><span class="line">  &lt;?php</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure>
等价于
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>javascript + php<br>同样可以用echo来替代，使得全是php语言，但是没必要</p>
</li>
<li><p>凡是<strong>动态</strong>的用php来写，凡是<strong>静态</strong>的就用javascript和html来写</p>
</li>
</ul>
<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>异步Javascript和XML</p>
<ul>
<li>跨平台浏览器，通过在程序后台做工作，使Internet应用程序更加强大</li>
<li>无需重载网页，就可以发送及传回数据，更新网页显示<h5 id="AJAX和PHP交互"><a href="#AJAX和PHP交互" class="headerlink" title="AJAX和PHP交互"></a>AJAX和PHP交互</h5></li>
<li>创建<strong>XMLHttpRequest</strong>对象：GetXmlHttpObject</li>
<li>通过网页传参数<code>url=url+&quot;?q=&quot;+str</code>?q表示要传参数啦，str是要传的参数的值</li>
<li><code>url=url+&quot;&amp;sid=&quot;+Math.random()</code>本身没有用，是刷新网页用的</li>
<li>然后通过<code>xmlHttp.open(&quot;GET&quot;,url,true)</code>发送url出去（带参数）<blockquote>
<p>通过网址传参：GET</p>
</blockquote>
</li>
</ul>
<p><strong>总流程</strong></p>
<ol>
<li>html：head中script控件使之与js文件相关联</li>
<li>html：通过span控件的inner属性id来获取txtHint</li>
<li>js：通过document.getElementById对接html中的id</li>
<li>js：创建XMLHttpRequest对象</li>
<li>js：通过onreadystatechange设置中断（每个网页“正在加载”都是在这个等待的状态）</li>
<li>js：通过url访问到php并用GET操作来open</li>
<li>php：遍历并给出response</li>
<li>js：在给出response之后statechange才会变有效，中断恢复</li>
<li>js：赋给span传回html</li>
<li>html：打印</li>
</ol>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>一种让数据在页面中持续有效的方法，存储在服务器端</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'userid'</span>] = <span class="string">''</span>;</span><br><span class="line">$_SESSION[<span class="string">'usertype'</span>] = <span class="string">''</span>;</span><br></pre></td></tr></table></figure>
<p><code>session_destroy()</code></p>
<ul>
<li>防止没有登录直接访问</li>
<li>防止登录后长时间未访问页面</li>
<li>session判断必须要放在每个php最前面</li>
</ul>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ul>
<li><p>设置背景颜色<br>no2是底下的class属性</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: yellow&#125;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;<span class="attribute">background-color</span>: <span class="number">#00ff00</span>&#125;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;<span class="attribute">background-color</span>: transparent&#125;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(250,0,255)&#125;</span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-class">.no2</span> &#123;<span class="attribute">background-color</span>: gray; <span class="attribute">padding</span>: <span class="number">20px</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>设置文本的背景颜色<br><code>&lt;span class=&quot;highlight&quot;&gt;</code></p>
</li>
<li><p>将图像设置为背景<br><code>body {background-image:url(/i/eg_bg_04.gif);}</code></p>
</li>
<li><p>重复背景图像（铺开）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">background-image: url('/i/eg_bg_03.gif');</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line"><span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 30% 20%;</span><br></pre></td></tr></table></figure>
<h5 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h5></li>
<li><p>设置字体尺寸<br><code>p {font-size: 100%}</code></p>
</li>
<li><p>设置边框样式（）<br><code>p.groove {border-style: groove}</code></p>
<p>设置下边框属性</p>
<p><code>border-bottom-color:#ff0000;</code></p>
</li>
</ul>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul>
<li><p>sp_addorder</p>
<p>#6 cnt计算的是逗号数+1，即命令数量</p>
<p>#11 将输入插入数据库</p>
<p>#13 limit1 只一个例子</p>
<p>#17 substring: 字符串 ，分隔符，分隔符序号：整出第几个分隔符前面的所有字符串</p>
<p>#15-… 每个循环得到两个元素（result：id和result1：数量）</p>
<p>#27 这里的要输入    price在#29通过别的数据库读取（参考）</p>
<p>#30 更改库存</p>
<p>#34 计算订单总体价格sum()</p>
</li>
</ul>
<h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><ul>
<li>新增商品</li>
</ul>
<p>insert+上传图片+展示</p>
<p>输出部分<code>&lt;?php echo &quot;&lt;img src=&quot; . strval($RS[&quot;productimage&quot;]).&quot;&gt;&quot;?&gt;</code></p>
<p>参考database/mysql.php</p>
<ul>
<li><p>买家卖家分别登录</p>
</li>
<li><p>合成购买商品信息<br>selectproduct0.php中的addorder中的java脚本</p>
</li>
<li><p>生成订单</p>
<ol>
<li>t_order0插进记录</li>
<li>t_orderdetail插进记录</li>
<li></li>
</ol>
</li>
</ul>
<ol start="4">
<li><p>t_product中库存减少</p>
<p><strong>事务</strong>：若有任何一个步骤没完成，插入的数据要全部还原</p>
</li>
</ol>
<p><strong>基础任务</strong></p>
<ul>
<li>:ok:新增商品</li>
<li>:ok:登陆注册</li>
<li>:ok:付款</li>
</ul>
<p><strong>附加题</strong></p>
<ul>
<li><p>:ok:库存定时失效</p>
</li>
<li><p>:ok:用户信息修改</p>
</li>
<li><p>商品分类 =&gt; 同类商品比较，价格排序</p>
</li>
<li><p>购物车功能实现</p>
</li>
<li><p>:ok:撤销订单（flag=1：对于ispay=0的可以直接撤销）</p>
</li>
<li><p>修改订单（涉及两个sql语句）</p>
</li>
<li><p>:ok:支付订单（把ispay改成1）<br>存款– </p>
</li>
<li><p>:ok:商品库存管理（update）<br>和银行接口搭配</p>
</li>
<li><p>:ok:和物流配送系统建立接口（issend：对于ispay=1的可以直接发货）</p>
<p>三次握手</p>
</li>
<li><p>:ok:和银行建立接口</p>
</li>
</ul>
<ul>
<li><p>售后服务，评价留言</p>
</li>
<li><p>会员功能</p>
</li>
</ul>
<p>orderlist.php    #对订单循环，#74对商品循环。#17 几个表内联</p>
<p>进入付款：javascript:beginpay(‘dsadada’)</p>
<p>① 登陆注册<br>检测ID重复<br>买家卖家个性化（具体在后面会说明）<br>② 新增商品<br>买家新增商品只能添加两种信息，因为和银行建立了接口，所以库存需要在加货功能实现，在这里演示是说明我可以实现添加商品功能<br>③ 付款<br>可以在生成订单之后直接付款，也可以在我的订单页面中点击付款<br>③ 库存失效<br>一分钟的有效时间<br>④ 用户信息修改<br>商家利润是没办法修改的，这是通过后台计算得到<br>⑤ 撤销订单<br>删除的话如果是ispay=0即还未付款的商品库存会增加，ispay=1/2即已付款/失效的库存不会增加<br>⑥ 支付订单<br>第二种付款方式，密码输错了无法支付<br>⑦ 库存管理<br>添加商品不能选择库存是因为商家进购商品是要花钱的，所以必须在加货地方增加库存，然后这里增加库存是用一开始定的价格即采购价格加的库存，然后通过修改商品价格来卖给买家，这样可以赚取收益。修改过的价格不影响进价。<br>此外，关于银行接口，商家在进购商品时的总数量不能大于自己的存款，如果大于存款则加货失败；还有在加购商品之后利润和存款都会减去响应的数值；<br>⑧ 物流配送建立接口<br>三次握手，对于成功支付的订单才会在卖家端显示发货<br>⑨ 银行接口<br>存款管理<br>利润计算</p>
]]></content>
      <categories>
        <category>curriculum</category>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>课内</tag>
        <tag>大三上</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning</title>
    <url>/2019/12/06/curicculum/tofel/%E5%90%AC%E5%8A%9B/</url>
    <content><![CDATA[<ul>
<li>Now,…画一条长长的线（要讲下一个话题了）</li>
<li>不会考定义，所以定义只要听懂就行。重点是要注意提到ta干什么</li>
<li>转折之后的信息很关键，可以用^表示</li>
<li>考古：今昔对比很喜欢考</li>
<li>What do you  think… 回答很重要</li>
<li>for example的例子（<strong>对象</strong>）一定要记！而且只记核心名词（Many year ago…）故事内容（更深一层）相对不重要</li>
<li>长难句只要求听懂，记笔记舍本逐末</li>
<li>mainly discuss 有细节有笼统，选笼统（一般字也少）</li>
<li>一般没有考全文的题目，最后一题也划片到最后一个part就行</li>
<li>完美笔记原则：一定是为了帮助做对题目<ol>
<li>优先记实义名词动词</li>
<li>学会用符号和缩写</li>
<li>具体的数字和时间不用管</li>
<li>注重结构和段落 句间逻辑（学会画层次）</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>curriculum</category>
        <category>tofel</category>
      </categories>
      <tags>
        <tag>tofel</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing</title>
    <url>/2019/12/06/curicculum/tofel/KMF_writing/</url>
    <content><![CDATA[<p><a href="https://toefl.kmf.com/erater/writeresult/156455091588395176/e1f9tj" target="_blank" rel="noopener">https://toefl.kmf.com/erater/writeresult/156455091588395176/e1f9tj</a></p>
<p><a href="https://toefl.kmf.com/erater/writeresult/155203273015149680/a1f6bj" target="_blank" rel="noopener">https://toefl.kmf.com/erater/writeresult/155203273015149680/a1f6bj</a></p>
<p>Generally, it seems plausible that movies and television, serving as a distraction when young people are learning, will impose a negative impact on their behavior. However, it is not the whole case; otherwise, with the optimization of the contents, movies and television have become gradually conducive to young people. Therefore, from my perspective, I believe those modern products will have more positive effects on young people.<br>    Of all reasons leading to my judgment, it is the most rudimentary that the various world, both real and virtual, provided by movies and television, can inspire young people’s imagination and promising life path. In old times, say the time before such products were invented, young people’s horizons are constrained by some trivial games within a village or even a yard. children at that times can hardly imagine what the world would be like and what terrific things they could achieve, which may be the intrinsic motivation during their studying and working. Nevertheless, with the favor of modern products, like movies and television, young people have significantly more access to diverse things outside their countries or even outside the planet. As a result, they are able to imagine more practical and magnificent, directing their life path as well.<br>    Often neglected but no less important is the educational function of movies and television is attracting more producers and parents, which is developing increasingly inspiring. As we can observe, a huge variety of educational applications spring up in television, such as the contest of Mandarin, composition and something like that, attracting more young people to watch while learn. Likewise, more authentic knowledge are added to some section of movie, especially for those movies aiming for the young people. In this case, young people can easily immerse themselves in the condition of absorbing knowledge even without noticing.<br>    In short, admittedly, although there exists some negative contents in these products, such as violence and sexuality, more positive aspects need to be considered when movies and television are criticized. And I believe with the more attention paid by the content producer, the quality of movies and television are bound to enhance with young people as they grow up.</p>
<h3 id="Integrated-Writing-模板（150-225个字！记得别超…）"><a href="#Integrated-Writing-模板（150-225个字！记得别超…）" class="headerlink" title="Integrated Writing 模板（150-225个字！记得别超…）"></a>Integrated Writing 模板（150-225个字！记得别超…）</h3><ul>
<li><p><strong>首段引入</strong><br>  The passage states that … for several reasons. </p>
<p>  ·But the professor <em>casts doubts to all of these reasons</em>, she thinks, on the other hand, that …</p>
</li>
<li><p><strong>第一个观点</strong><br>  First, the writer argues that … since …</p>
<p>  However, the professor holds a converse opinion about the theory, because usually, …</p>
<p>  Therefore, this possibility that the writer states does not hold up.</p>
</li>
<li><p><strong>第二个观点</strong><br>  Second, the author points out that …</p>
<p>  Nevertheless, the professor in the lecture disagrees with it because …</p>
<p>  Thus, this point the professor made is not possible.</p>
</li>
<li><p><strong>第三个观点</strong><br>  Finally, the author suggests that …</p>
<p>  Nonetheless, the professor argues against this idea, because…</p>
<p>  So this possibility is not correct as well.</p>
</li>
</ul>
<h3 id="individual-Writing-模板"><a href="#individual-Writing-模板" class="headerlink" title="individual Writing 模板"></a>individual Writing 模板</h3><ul>
<li><p><strong>首段引入</strong></p>
<p>Generally, it seems plausible that … , since …</p>
<p>However, it is not the whole case; otherwise, …</p>
<p>Therefore, from my perspective, …</p>
</li>
<li><p><strong>第一个观点</strong><br>Of all reasons leading to my judgment, it is the most rudimentary that …<br>To be more specific, …</p>
</li>
<li><p><strong>第二个观点</strong><br>What should be equally worth discussing is that …<br>Initially, … To explain further, …</p>
</li>
<li><p><strong>第三个观点</strong>（没时间就不写（一般肯定没时间））<br>Often neglected but no less important, …<br>One time I …</p>
</li>
<li><p><strong>让步论证</strong>（没时间就不写，优先级比第三个观点高）<br>Admittedly, some people may argue that …<br>But actually …</p>
</li>
<li><p><strong>结尾</strong><br>In short, it is fairly safe to draw a conclusion that …</p>
</li>
</ul>
<p>​    Generally, people may find it plausible that girlfriend will never lie, since they love their boyfriend and don’t want to let them disappointed. However, it is not the whole case; otherwise, they just treat their boyfriend as a dumb ass that can be teased anyway. So I agree with the statement that girlfriends are useless and even harmful.</p>
<p>​    Of all the reasons leading to my judgment, it is the most rudimentary that girlfriends are irrational, rude, and emotionless. They don’t like anything. all they care about is just themselves. Nonsense!</p>
<p>​    What should be equally worth discussing is that they are brute. Initially, they act as a little sheep. After they are domesticated by boyfriends, they become like a monster.</p>
<p>​    Often neglected but no less important, they don’t even like you. You just like a wood, a useless and disgusting wood. </p>
<p>​    In short, it is fairly to draw a conclusion that girlfriends are strong enough to kick you out of your own world. Shit!</p>
<p>​    Fuck you! Wish this blame will increase my typing speed a littl</p>
]]></content>
      <categories>
        <category>curriculum</category>
        <category>tofel</category>
      </categories>
      <tags>
        <tag>tofel</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Assignment 1</title>
    <url>/2019/12/06/learning/cs231/assignment1/</url>
    <content><![CDATA[<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol>
<li>创建新的虚拟环境时需要<em>在navigator</em>重装jupyter</li>
<li><code>cannot import name &#39;imread&#39; from &#39;scipy.misc&#39;</code>  要把scipy降级到1.2.1 <code>pip3 install scipy==1.2.1</code></li>
</ol>
<h3 id="cs231-assignments"><a href="#cs231-assignments" class="headerlink" title="cs231 assignments"></a>cs231 assignments</h3><h4 id="assignment-1"><a href="#assignment-1" class="headerlink" title="assignment 1"></a>assignment 1</h4><h5 id="knn"><a href="#knn" class="headerlink" title="knn"></a>knn</h5><ul>
<li><p>compute L2 distance<br>可直接调用范式函数（缺省值为二范式）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_norm=np.linalg.norm(x, ord=<span class="literal">None</span>, axis=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>two loops</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dists[i][j] = np.sqrt(np.sum((X[i] - self.X_train[j]) ** <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>one loop</p>
<blockquote>
<p>np.sum broadcast机制:</p>
<p>  当axis为0时,是压缩行,即将每一列的元素相加,将矩阵压缩为一行</p>
<p>  当axis为1时,是压缩列,即将每一行的元素相加,将矩阵压缩为一列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dists[i] = np.sqrt(np.sum((self.X_train - X[i]) ** <span class="number">2</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>no loop</p>
<blockquote>
<p>在Numpy中，</p>
<p>  test$\times$train + 1$\times$train    矩阵的每一行与向量相加</p>
<p>  test$\times$train + test$\times$1    矩阵的每一列与向量相加</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  dists += np.sum(self.X_train ** <span class="number">2</span>, axis=<span class="number">1</span>).reshape(<span class="number">1</span>, num_train)</span><br><span class="line">dists += np.sum(X ** <span class="number">2</span>, axis=<span class="number">1</span>).reshape(num_test, <span class="number">1</span>) <span class="comment"># reshape for broadcasting</span></span><br><span class="line">  dists -= <span class="number">2</span> * np.dot(X, self.X_train.T)</span><br><span class="line">  dists = np.sqrt(dists)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>predict the class</p>
<ul>
<li><p>find out k neighbors</p>
<blockquote>
<p><strong>np.argsort(a, axis=-1, kind=’quicksort’, order=None)</strong></p>
<p>​    返回的是数组值从小到大的索引值 </p>
<p>​    返回的是索引值所以可以直接作为数组的序号使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">closest_y = self.y_train[np.argsort(dists[i])[<span class="number">0</span>:k]]</span><br></pre></td></tr></table></figure></li>
<li><p>decide the class</p>
<blockquote>
<p><strong><em>np.bincount</em>(x, weights=None, minlength=0)</strong></p>
<p>​    bin的数量比x中的最大值大1（0-最大值），每个bin给出了它的索引值在x中出现的次数，还可以加权</p>
<p>​    所以从中可以直接选出次数最多的类</p>
<p><strong><em>np.argmax</em>(axis=None, out=None)</strong></p>
<p>​    取出a中元素最大值所对应的<strong>索引值</strong>（索引值默认从0开始），所以经过bincount之后可以直接取出类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_pred[i] = np.bincount(closest_y).argmax()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>cross validation</p>
<ul>
<li><p>split</p>
<blockquote>
<p><strong><em>np.array_split</em>(x,num)</strong><br>把x等分成num堆，最后一堆可能不对称</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train_folds = np.array_split(X_train,num_folds)</span><br><span class="line">  y_train_folds = np.array_split(y_train,num_folds)</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>excert cross validation</p>
<blockquote>
<p><strong>y.shape[0]</strong><br>意思是：返回 y 中行的总数。 这个值在 y 是单特征的情况下 和 len(y) 是等价的 。即数据集中数据点的总数。</p>
</blockquote>
<blockquote>
<p><strong><em>np.vstack</em>(tup)</strong></p>
<p>​    在竖直方向上堆叠，等价于：np.concatenate(tup, axis=1)</p>
<p><strong>np.hstack*(tup)</strong></p>
<p>​    在水平方向上平铺，等价于：np.concatenate(tup, axis=0)</p>
<p>tup:sequence of arrays，有维度要求</p>
</blockquote>
<p>注意X_train是矩阵，所以用vstack堆叠<br>  而y_train是向量，所以用hstack堆叠</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_choices:</span><br><span class="line">  accuracies = []</span><br><span class="line">  <span class="keyword">print</span> k</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(num_folds):</span><br><span class="line">      X_train_cv = np.vstack(X_train_folds[<span class="number">0</span>:i] + X_train_folds[i+<span class="number">1</span>:])</span><br><span class="line">      y_train_cv = np.hstack(y_train_folds[<span class="number">0</span>:i] + y_train_folds[i+<span class="number">1</span>:])</span><br><span class="line">      X_valid_cv = X_train_folds[i]</span><br><span class="line">      y_valid_cv = y_train_folds[i]</span><br><span class="line">    </span><br><span class="line">      classifier.train(X_train_cv, y_train_cv)</span><br><span class="line">      dists = classifier.compute_distances_no_loops(X_valid_cv)</span><br><span class="line">      accuracy = float(np.sum(classifier.predict_labels(dists, k) == y_valid_cv)) / y_valid_cv.shape[<span class="number">0</span>]</span><br><span class="line">      accuracies.append(accuracy)</span><br><span class="line">  k_to_accuracies[k] = accuracies</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>区分三种数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Split the data into train, val, and test sets. In addition we will</span></span><br><span class="line"><span class="comment"># create a small development set as a subset of the training data;</span></span><br><span class="line"><span class="comment"># we can use this for development so our code runs faster.</span></span><br><span class="line">num_training = <span class="number">49000</span></span><br><span class="line">num_validation = <span class="number">1000</span></span><br><span class="line">num_test = <span class="number">1000</span></span><br><span class="line">num_dev = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Our validation set will be num_validation points from the original</span></span><br><span class="line"><span class="comment"># training set.</span></span><br><span class="line">mask = range(num_training, num_training + num_validation)</span><br><span class="line">X_val = X_train[mask]</span><br><span class="line">y_val = y_train[mask]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Our training set will be the first num_train points from the original</span></span><br><span class="line"><span class="comment"># training set.</span></span><br><span class="line">mask = range(num_training)</span><br><span class="line">X_train = X_train[mask]</span><br><span class="line">y_train = y_train[mask]</span><br><span class="line"></span><br><span class="line"><span class="comment"># We will also make a development set, which is a small subset of</span></span><br><span class="line"><span class="comment"># the training set.</span></span><br><span class="line">mask = np.random.choice(num_training, num_dev, replace=<span class="literal">False</span>)</span><br><span class="line">X_dev = X_train[mask]</span><br><span class="line">y_dev = y_train[mask]</span><br><span class="line"></span><br><span class="line"><span class="comment"># We use the first num_test points of the original test set as our</span></span><br><span class="line"><span class="comment"># test set.</span></span><br><span class="line">mask = range(num_test)</span><br><span class="line">X_test = X_test[mask]</span><br><span class="line">y_test = y_test[mask]</span><br></pre></td></tr></table></figure>
</li>
<li><p>SVM</p>
<ul>
<li><p>naive<br>for those $j==y_i$, continue<br>for those $j!=y_i$,</p>
<pre><code>`margin = scores[j] - correct_score + 1` 
if $margin&gt;0$ then 
    `loss += margin`
    `dW[:, y[i]] -= X[i, :]`
    `dW[:, j] += X[i, :]`</code></pre><ul>
<li><p>remember to devide num_train to prevent exploding loss</p>
</li>
<li><p>regularization</p>
</li>
</ul>
</li>
<li><p>vectorized</p>
<ul>
<li><p>compute score<em>(N by C)</em> and score_correct<em>(N by 1)</em></p>
</li>
<li><p>compute margins</p>
</li>
<li><p>for loss</p>
<ul>
<li>把不到0的设成0            <code>margins[margins &lt;= 0] = 0</code></li>
<li>把$j==y_i$的设成0        <code>margins[np.arange(num_train), y] = 0</code></li>
<li>老样子</li>
</ul>
</li>
<li><p>for dW</p>
<ul>
<li><p>把大于0的设成1            <code>margins[margins &gt; 0] = 1</code></p>
</li>
<li><p>计算每一行的总和加到$j==y_i$那里<br><code>row_sum = np.sum(margins, axis=1)</code><br><code>margins[np.arange(num_train), y] = -row_sum</code></p>
</li>
<li><p>$$<br>\frac{\partial L}{\partial W} =<br>\frac{\partial L}{\partial S} *<br>\frac{\partial S}{\partial W}<br>$$</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>SGD</p>
</li>
</ul>
<blockquote>
<p><strong><em>np.random.choice</em></strong></p>
<p>随机抽样，抽出的是index</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment"># 参数意思分别 是从a中以概率P，随机选择3个, p没有指定的时候相当于是一致的分布</span></span><br><span class="line">&gt;a1 = np.random.choice(a=<span class="number">5</span>, size=<span class="number">3</span>, replace=<span class="literal">False</span>, p=<span class="literal">None</span>)</span><br><span class="line">&gt;print(a1)</span><br><span class="line">&gt;<span class="comment"># 非一致的分布，会以多少的概率提出来</span></span><br><span class="line">&gt;a2 = np.random.choice(a=<span class="number">5</span>, size=<span class="number">3</span>, replace=<span class="literal">False</span>, p=[<span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.0</span>])</span><br><span class="line">&gt;print(a2)</span><br><span class="line">&gt;<span class="comment"># replacement 代表的意思是抽样之后还放不放回去，如果是False的话，那么出来的三个数都不一样，如果是True的话， 有可能会出现重复的，因为前面的抽的放回去了。</span></span><br><span class="line">&gt;<span class="comment">####深度学习中without replacement会快很多</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p><strong><em>np.max</em></strong>: 接受一个参数，返回对应的<strong>最大值</strong></p>
<p><strong><em>np.argmax</em></strong>: 接受一个参数，返回<strong>最大值对应的索引</strong></p>
<p><strong><em>np.maximize</em></strong>: 接受两个参数，<strong>对应数学中的max操作</strong></p>
</blockquote>
<ul>
<li><p>Cross Validation choose hyperparameters</p>
<p>for learning_rate</p>
<pre><code>for regularization_strength
    初始化新的svm分类器        `svm = LinearSVM()`
    训练并得到loss_hist        `loss_hist = svm.train(X_train, y_train, learning_rate=lr,    reg=rs, num_iters=1500, verbose=True)`
    预测分类        ` y_train_pred = svm.predict(X_train)`
    得到train_accuracy和vali_accuracy    `train_acc = np.mean(y_train == y_train_pred)`
    记录历史        `results[(lr, rs)] = (train_acc, val_acc)`
    和最大值比较</code></pre><blockquote>
<p><strong><em>np.mean</em></strong></p>
<p>axis 不设置值，对 m*n 个数求均值，返回一个实数</p>
<p>axis = 0：压缩行，对各列求均值，返回 1* n 矩阵</p>
<p>axis =1 ：压缩列，对各行求均值，返回 m *1 矩阵</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>Softmax</p>
<ul>
<li><p>get_CIFAR10_data</p>
<ul>
<li>subsample: mask =&gt; val, train, test, dev</li>
<li>reshape: into rows</li>
<li>normalize: subtract the mean image</li>
<li>add bias and transform into columns</li>
</ul>
</li>
<li><p>naive<br>$L_{i} = -\log P_{y_{i}} = -\log\left(\frac{e^{f_{y_{i}}}}{\sum_{j}e^{f_{j}}}\right) = -f_{y_{i}}+\log\sum_{j}e^{f_{j}}$</p>
<p>$L = \frac{1}{N}\sum_{i}L_{i}+\lambda R(W)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_train = X.shape[<span class="number">0</span>]</span><br><span class="line">    num_class = W.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_train):</span><br><span class="line">        score = X[i].dot(W)</span><br><span class="line">        score -= np.max(score)      <span class="comment"># prevent numerical instability</span></span><br><span class="line">        correct_class_score = score[y[i]]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># loss</span></span><br><span class="line">        loss += np.log(np.sum(np.exp(score))) - correct_class_score</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dW</span></span><br><span class="line">        dW[:, y[i]] -= X[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_class):</span><br><span class="line">            dW[:, j] = (np.exp(score[j]) / np.sum(np.exp(score))) * X[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># regularization</span></span><br><span class="line">        loss = loss / num_train + <span class="number">0.5</span> * reg * sum(W*W)</span><br><span class="line">        dW = dW / num_class + reg * W</span><br></pre></td></tr></table></figure>
</li>
<li><p><img src="https://upload-images.jianshu.io/upload_images/2233157-b77105789e36c847.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num_train = X.shape[0]</span><br><span class="line">num_class = W.shape[1]</span><br><span class="line">for i in xrange(num_train):</span><br><span class="line">    score = X[i].dot(W)</span><br><span class="line">    score -= np.max(score)      # prevent numerical instability</span><br><span class="line">    correct_class_score = score[y[i]]</span><br><span class="line"></span><br><span class="line">    # loss</span><br><span class="line">    loss += np.log(np.sum(np.exp(score))) - correct_class_score</span><br><span class="line"></span><br><span class="line">    # dW</span><br><span class="line">    dW[:, y[i]] -= X[i]</span><br><span class="line">    for j in xrange(num_class):</span><br><span class="line">        dW[:, j] += (np.exp(score[j]) / np.sum(np.exp(score))) * X[i]</span><br><span class="line"></span><br><span class="line">    # regularization</span><br><span class="line">    loss = loss / num_train + 0.5 * reg * np.sum(W*W)</span><br><span class="line">    dW = dW / num_train + reg * W</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>learning</category>
        <category>cs231n</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>cs231</tag>
      </tags>
  </entry>
  <entry>
    <title>Assignment 2</title>
    <url>/2019/12/06/learning/cs231/assignment2/</url>
    <content><![CDATA[<h3 id="assignment-2"><a href="#assignment-2" class="headerlink" title="assignment 2"></a>assignment 2</h3><ul>
<li><p><strong>FullyConnectedNet.ipynb</strong></p>
<ul>
<li><p>affine_forward</p>
<blockquote>
<p><strong><em>.size</em></strong><br>number=X.size  <em># 计算 X 中所有元素的个数</em><br>X_row=np.size(X,0)  <em>#计算 X 一行元素的个数</em><br>X_col=np.size(X,1)  <em>#计算 X 一列元素的个数</em></p>
</blockquote>
<blockquote>
<p><strong><em>.shape</em></strong><br>X_dim=X.shape  <em># 以元组形式，返回数组的维数</em><br>print(X.shape[0])  <em># 输出行的个数</em><br>print(X.shape[1])  <em>#输出列的个数</em></p>
</blockquote>
<blockquote>
<p><strong><em>len</em></strong><br>length=len(X)  #返回对象的长度   不是元素的个数  </p>
</blockquote>
</li>
<li><p>affine_backward<br>$ dx = dout * w^T $<br>$ dw = x^T * dout $<br>$ db = [1,…,1] * dout $</p>
</li>
<li><p>relu_forward<br>$ out = maximum(0, x) $</p>
</li>
<li><p>relu_backward</p>
<ul>
<li>sigmoid: $g’(z) = a * (1-a) $</li>
<li>tanh: $ g’(z) = 1 - a^2 $</li>
<li>relu:     $$g’(z) = \begin{cases}<br>0 &amp; z&lt;0 \<br>1 &amp; z≥0<br>\end{cases}$$</li>
<li>leaky relu: $$g’(z) = \begin{cases}</li>
</ul>
<p>0.01 &amp; z&lt;0 \<br>1 &amp; z≥0<br>\end{cases}$$</p>
<p>$ dx = dout * g’(z) $</p>
</li>
<li><p>class TwoLayerNet<br>【affine - relu - affine - softmax】</p>
<ul>
<li><p>init</p>
<ul>
<li>一组<strong>高斯分布</strong>的数据：<strong><em>np.random.randn</em></strong><br>Gaussian centered at 0.0 with standard deviation equal to weight_scale<br><code>np.random.randn(input_dim, hidden_dim) * weight_scale</code></li>
<li>添加元素到字典<br><code>self.params{&#39;W1&#39;} =</code><br>初始化<br><code>self.params = {}</code></li>
</ul>
</li>
<li><p>loss</p>
<p>$$ return = \begin{cases}<br>y is None =&gt; scores \<br>y is not None =&gt; \begin{cases}  loss \ grads \end{cases}<br>\end{cases}$$</p>
<p>调用了之前的affine_blablabla，还有softmax_loss</p>
</li>
</ul>
</li>
<li><p>class Solver</p>
<pre><code>To train a model, you will first construct a Solver instance, passing the **model**, **dataset**, and **various options** (learning rate, batch size, etc) to the constructor. 
You will then call the train() method to run the optimization procedure and train the model. After the train() method returns, **model.params** will contain the parametersthat performed best on the validation set over the course of training. In addition, the instance variable **solver.loss_history** will contain a list of all losses encountered during training and the instance variables **solver.train_acc_history** and **solver.val_acc_histor** will be lists of the accuracies of the model on the training and validation set at each epoch.
Example usage might look something like this:</code></pre>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> data = &#123;</span><br><span class="line"> 	<span class="string">'X_train'</span>: <span class="comment"># training data</span></span><br><span class="line"> 	<span class="string">'y_train'</span>: <span class="comment"># training labels</span></span><br><span class="line"> 	<span class="string">'X_val'</span>: <span class="comment"># validation data</span></span><br><span class="line"> 	<span class="string">'y_val'</span>: <span class="comment"># validation labels</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> model = MyAwesomeModel(hidden_size=<span class="number">100</span>, reg=<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"> solver = Solver(model, data,</span><br><span class="line">                 update_rule=<span class="string">'sgd'</span>,</span><br><span class="line">                 optim_config=&#123;</span><br><span class="line">                   <span class="string">'learning_rate'</span>: <span class="number">1e-3</span>,</span><br><span class="line">                 &#125;,</span><br><span class="line">                 lr_decay=<span class="number">0.95</span>,</span><br><span class="line">                 num_epochs=<span class="number">10</span>, batch_size=<span class="number">100</span>,</span><br><span class="line">                 print_every=<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line">solver.train()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>FullyConnectedNet</p>
<pre><code>- 通过 **weight_scale** 调整权重初始化的范围
- 多层网络参数设置（for循环）
  `self.params[&apos;W&apos; + str(i + 2)]`
- forward
  `for i in range(self.num_layers):`
  backward
  `for i in range(self.num_layers, 0, -1):`</code></pre><ul>
<li><p>optim.py<br>Each update rule has the same interface:<br><code>def update(w, dw, config=None):</code></p>
<ul>
<li>SGD+momuntum<br>$v = momentum * v -learning_{rate} * dw$<br>$w_{next} = w+v$</li>
<li>RMSProp<br>$ cache = decay_{rate} * cache + (1-decay_{rate}) * dw * dw$<br>$ w_{next} = w - \frac{learning_{rate} * dw}{\sqrt{cache + \epsilon}} $ </li>
<li>Adam<br>$ t = t + 1 $<br>$ m = \beta_1 * m + (1-\beta_1) * dw $         <strong>first momentum</strong><br>$ v = \beta_2 * v + (1-\beta_2) * dw * dw $        <strong>second momentum</strong><br>$ \widehat{m} = \frac{m}{1 - \beta_1^t} $         <strong>bias correction</strong><br>$ \widehat{v} = \frac{v}{1 - \beta_2^t} $            <strong>bias correction</strong><br>$ w_{next} = w - \frac{learning_{rate} * \widehat{m}}{\sqrt{\widehat{v} + \epsilon}} $</li>
</ul>
</li>
<li><p>Train the best model</p>
<ul>
<li><strong>FullyConnectedNet</strong> 的参数：<br>[100, 100, 100, 100, 100], weight_scale=5e-2, reg = reg</li>
<li><strong>Solver</strong> 的参数：<br>model, data, num_epochs=10, batch_size=200, update_rule=’rmsprop’,<br>optim_config={<pre><code>&apos;learning_rate&apos;: learning_rate</code></pre>}, verbose=False</li>
<li><strong>learnin_rate</strong> 可行值：<br>[1e-3, 1e-4]</li>
<li><strong>reg</strong> 可行值：<br>[1e-2, 1e-3, 1e-4]</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>BatchNormalization.ipynb</strong></p>
</li>
<li><p><strong>Dropout.ipynb</strong></p>
</li>
<li><p><strong>ConvolutionalNetworks.ipynb</strong></p>
</li>
<li><p><strong>Tensorflow.ipynb</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>learning</category>
        <category>cs231n</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>cs231</tag>
      </tags>
  </entry>
  <entry>
    <title>比较 对抗样本 在 压缩模型 上的可迁移性</title>
    <url>/2019/12/06/lab/compress/adversarial/</url>
    <content><![CDATA[<h3 id="论文名称"><a href="#论文名称" class="headerlink" title="论文名称"></a>论文名称</h3><p><a href="https://arxiv.org/pdf/1810.00208.pdf" target="_blank" rel="noopener">To Compress or Not to Compress: Understanding the Interactions between Adversarial Attacks and Neural Network Compression</a></p>
<h3 id="论文重述"><a href="#论文重述" class="headerlink" title="论文重述"></a>论文重述</h3><p>该论文主要是讨论对抗攻击在压缩模型上的可迁移性 (Transferability)，分为三种情形：</p>
<ul>
<li>compressed 产生对抗样本测试自身</li>
<li>baseline 产生对抗样本测试 compressed</li>
<li>compressed 产生对抗样本测试 baseline<br>比较的压缩方式为：剪枝 和 量化<br>比较的攻击方法为：IFGSM, IFGM, Deepfool</li>
</ul>
<h3 id="比较结果"><a href="#比较结果" class="headerlink" title="比较结果"></a>比较结果</h3><ul>
<li><p>剪枝方法</p>
<ol>
<li><p>对于 IFGM 和 IFGSM 方法，对抗样本的迁移性是受到剪枝过后密度减小造成影响的。具体表现在：</p>
<ul>
<li>当密度小的时候，用compressed生成的对抗样本去攻击baseline的效果不错，从小到大迁移性好</li>
<li>当密度小的时候，用baseline生成的对抗样本去攻击compressed效果不好，从大到小迁移性不好</li>
</ul>
</li>
<li><p>对于 Deepfool 方法，小的生成样本攻击自身，小的生成样本攻击大的，这两种情况在密度减小的时候迁移性都更好。</p>
</li>
<li><p>因为clipped的原因，对于有clipped的方法（IFGSM and IFGM），小的生成样本攻击自身，大的生成样本攻击小的，这两种情况在密度减小的时候迁移性都更不好。</p>
</li>
</ol>
</li>
<li><p>量化方法</p>
<ol>
<li><p>当量化精度高的时候，在量化与不量化之间的攻击效果不受影响</p>
</li>
<li><p>当小数位数减小的很厉害时类似fine-grained pruning（剪枝权重）的效果</p>
</li>
<li><p>整数位数很少的时候，小的产生样本攻击大的会变得异常困难，表明类别的语义信息保存在activations and weights中</p>
</li>
</ol>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong><em>（以下仅表示个人观点，欢迎讨论指正）</em></strong></p>
<p>就像看了一份实验报告一样，没有新方法，主要是比较结果。</p>
<p>个人感觉方法分的太细了，特别是攻击方法，感觉 ①没有从攻击原理的角度阐释可迁移性，②只是众多攻击模型中的典型三种，且IFGSM，IFGM和Deepfool的区别还挺大的，感觉又只像两类攻击方法。总之感觉脱离数学原理的比较都显得不那么全面。</p>
<p>亮点：</p>
<ul>
<li>use Mayo tool to generate pruned and quantised models</li>
<li>对于应用的讨论，作者最终的结论是公司用压缩模型发行并不会增加大模型的安全性</li>
</ul>
]]></content>
      <categories>
        <category>lab</category>
        <category>网络压缩</category>
      </categories>
      <tags>
        <tag>网络压缩</tag>
        <tag>对抗样本</tag>
        <tag>水文章</tag>
      </tags>
  </entry>
  <entry>
    <title>withimage</title>
    <url>/2019/12/04/test/withimage/</url>
    <content><![CDATA[<p>这是第一个有图的博文<br>图在这里：<br><img src="/2019/12/04/test/withimage/a.jpg" alt="义工招募"><br>让我们看看效果怎么样</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>welcome</title>
    <url>/2019/12/04/test/welcome%20to%20my%20blog/</url>
    <content><![CDATA[<p>nothing to say</p>
]]></content>
      <tags>
        <tag>copy</tag>
      </tags>
  </entry>
  <entry>
    <title>welcome</title>
    <url>/2019/12/04/test/welcome/</url>
    <content><![CDATA[<p>nothing to say</p>
]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>my first successful blog</title>
    <url>/2019/11/01/test/my-first-successful-blog/</url>
    <content><![CDATA[<p>测试tags和categories是否正常</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
  </entry>
  <entry>
    <title>learning/服务器</title>
    <url>/2019/12/06/learning/%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<ul>
<li><code>nvidia-smi</code></li>
<li><code>top</code></li>
<li><code>kkmwq</code></li>
<li><code>df -h</code></li>
<li><code>lsblk</code></li>
<li><code>cat /etc/hostname</code></li>
<li><code>ps -ef</code>查询进程<code>kill -s 9 [PID]</code>杀死 [PID] 的进程</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>learning/大话数据结构</title>
    <url>/2019/12/06/learning/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h3><ul>
<li><p>基本概念和术语<br><strong>数据</strong>：整型实数型，声音图像…<br><strong>数据元素</strong>：畜类的数据元素是牛羊狗猫…<br><strong>数据项</strong>：数据元素牛的数据项是眼耳鼻喉…或者姓名年龄性别…最小不可分割<br><strong>数据对象</strong>：数据的子集，性质相同的数据元素的集合<br>数据—-&gt;数据元素—-&gt;数据项<br><strong>抽象数据类型</strong>（<strong>ADT</strong>）：模型和模型操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADT	抽象数据类型名</span><br><span class="line">DATA</span><br><span class="line">	定义数据元素</span><br><span class="line">OPERATION</span><br><span class="line">	操作</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>逻辑结构</strong>：集合，线性，树形 ，图形</p>
</li>
<li><p><strong>物理结构</strong>：顺序存储，链式存储</p>
</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul>
<li><p>函数的渐进增长</p>
<ol>
<li>忽略加法常数</li>
<li>与最高次项相乘的常数并不重要</li>
<li>更应该关注主项（最高阶项）的阶数</li>
<li>某个算法，随着n的增大，它会越来越优于另一个算法，或者越来越差于另一个算法</li>
</ol>
</li>
<li><p>时间复杂度</p>
<ol>
<li><p>用常数1取代运行时间中的所有加法常数</p>
</li>
<li><p>在修改后的运行次数函数中，只保留最高阶项</p>
</li>
<li><p>如果最高阶项存在且不是1，则去除与这个项相乘的常数</p>
<p>得到的结果就是大O阶</p>
</li>
</ol>
<ul>
<li><p>不管常数是多少，都记作O(1)</p>
</li>
<li><p>关键分析循环结构</p>
</li>
<li><table>
<thead>
<tr>
<th align="center">执行次数函数</th>
<th align="center">阶</th>
<th align="center">非正式术语</th>
</tr>
</thead>
<tbody><tr>
<td align="center">12</td>
<td align="center">O(1)</td>
<td align="center">常数项</td>
</tr>
<tr>
<td align="center">2n+3</td>
<td align="center">O(n)</td>
<td align="center">线性阶</td>
</tr>
<tr>
<td align="center">$3n^2+2n+1$</td>
<td align="center">O($n^2$)</td>
<td align="center">平方阶</td>
</tr>
<tr>
<td align="center">$5log2(n)+20$</td>
<td align="center">O($logn$)</td>
<td align="center">对数阶</td>
</tr>
<tr>
<td align="center">………………</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>耗费时间<br>$O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)$</p>
</li>
<li><p>通常提到的运行时间都是最坏情况的运行时间</p>
</li>
</ul>
</li>
<li><p>空间复杂度<br>$S(n) = O(f(n))$</p>
<ul>
<li>n为问题的规模，f(n)为语句关于n所占存储空间的函数</li>
</ul>
</li>
</ul>
<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>​    线性表(List)：零个或多个数据元素的有限序列</p>
<ul>
<li><p>顺序存储结构</p>
<ul>
<li><p>三个属性：存储起始位置<strong>data</strong>，最大存储容量<strong>MaxSize</strong>，线性表当前长度<strong>length</strong></p>
</li>
<li><pre><code class="C">GetElem(SqList L, <span class="keyword">int</span> i, ElemType *e){

}
&lt;!--￼<span class="number">1</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><h2 id="链式存储结构之单链表"><a href="#链式存储结构之单链表" class="headerlink" title="链式存储结构之单链表"></a>链式存储结构之单链表</h2></li>
</ul>
]]></content>
  </entry>
</search>
